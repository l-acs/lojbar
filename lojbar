#!/bin/clojure
; -*-Clojure-*-
(require '[clojure.string :as str])
(require '[clojure.java.io :as io])
(use '[clojure.java.shell :only [sh]])
(import 'java.lang.Runtime)

(def f-base "FFFFFF")
(def b-base "111111")
(def transparent "90")
(def mid "C4")
(def opaque "E9")

(def bat0cap "/sys/class/power_supply/BAT0/capacity")
(def bat0status "/sys/class/power_supply/BAT0/status")


(defn focus [input]
  (if (= input true)
    (str "%{F#" opaque f-base "}%{B#" opaque b-base "}")
    (if (= input false) ;normal unfocused
      (str "%{F#" mid f-base "}%{B#" transparent b-base "}")
      (if (= input "urgent")
        "something"
        (if (= input "dimmed") ;lowest focus
          (str "%{F#" transparent f-base "}%{B#" transparent b-base "}"))))))

(defn makebuttons [message actions buttons]
  ;%{A1:action:}%{A3:action:}...%{A}%{A}
  (if (empty? actions)
    message
    (makebuttons (str "%{A" (first buttons) ":" (first actions) ":}" message "%{A}") (rest actions) (rest buttons))))


(def music
  (str
   (makebuttons "  <  " '("mpc prev" "mpc seek 0") (list 1 3))
   (makebuttons
    (first (str/split (:out (sh "mpc" "status")) #"\n"))
    '("mpc toggle" "mpc toggle" "mpc volume +5" "mpc volume -5") (list 1 3 4 5))
   (makebuttons "  >  " '("mpc next" "mpc next") (list 1 3))))


(defn getwm []
  (second
   (str/split
    (first
     (str/split
      (:out (sh "wmctrl" "-m"))
      #"\n"))
    #"\s")))


(defn getdesktoplist [] 
  (def base
    (:out
     (sh "wmctrl" "-d")))
  (map
   #(str/split % #"\s")
   (str/split base #"\n")))


(defn getindex [desktop]
  (str (nth desktop 0)))

(defn getwindows [desktop] ;desktop is one line of the output of wmctrl -d
  (:out
   (sh "act.sh" "--getwindowsfordesktop"
       (getindex desktop))))

(defn isactive? [desktop]
  (= "*" (nth desktop 2)))

(defn haswindows? [desktop]
  (not (str/blank? (getwindows desktop))))

(defn getname [desktop]
  (nth desktop 12))

(defn makedesktopbutton [d]
  (def index (if (= (getwm) "CWM") (getindex d) (str (+ (read-string (getindex d)) 1))))
  (str
   (focus 
    (if (isactive? d) true (if (haswindows? d) false "dimmed")))
   (makebuttons
    (str " " (getname d) " ") (list (str "act.sh -s " index) (str "act.sh -f " index)) (list 3 1))))


(def desktops (makebuttons (str/join (map makedesktopbutton (getdesktoplist))) '("act.sh -f next" "act.sh -f prev") '(4 5)))

(def date (nth (str/split (:out (sh "date" "+%a, %b %-d %Y - %-I:%M%P")) #"\n") 0))

(defn battery [cap status threshold]
  (if (and (.exists (io/file cap)) (.exists (io/file status)))
     (if (= "Charging" (str/trim-newline (slurp status)))
       (str (focus false) " " (str/trim-newline (slurp cap)) "%" " - charging")
       (str (if (< (read-string (str/trim-newline (slurp cap))) threshold)
              (focus true)
              (focus false))
            " " (str/trim-newline (slurp cap)) "% "))
     "" ))

(print
 (focus false) "%{l}  " desktops
 (focus false) "%{c}" music
 "%{r}" (battery bat0cap bat0status 25) (focus false) " " date  "  ")


(shutdown-agents) ;without this it hangs
