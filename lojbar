#!/bin/clojure
; -*-Clojure-*-
(require '[clojure.string :as str])
(require '[clojure.java.io :as io])
(use '[clojure.java.shell :only [sh]])
(import 'java.lang.Runtime)

(def f-base "FFFFFF")
(def b-base "111111")
(def transparent "90")
(def mid "C4")
(def opaque "E9")

(def bat0cap "/sys/class/power_supply/BAT0/capacity")
(def bat0status "/sys/class/power_supply/BAT0/status")

(defn remove-back-to-back [lst item]
  (defn helper [lst item prev]
    (if (empty? lst)
      '()
      (if (= prev (first lst) item)
        (helper (rest lst) item item)
        (cons (first lst) (helper (rest lst) item (first lst))))))
  (helper lst item ""))

(defn squeeze [string chr] ;for parsing text alignment of wmctrl output, mostly
  (str/join 
   (remove-back-to-back (str/split string #"") chr)))

(defn exec [cmd]
  (:out 
   (apply sh (str/split cmd #"\s"))))

(defn focus [input]
  (if (= input true)
    (str "%{F#" opaque f-base "}%{B#" opaque b-base "}")
    (if (= input false) ;normal unfocused
      (str "%{F#" mid f-base "}%{B#" transparent b-base "}")
      (if (= input "urgent")
        "something"
        (if (= input "dimmed") ;lowest focus
          (str "%{F#" transparent f-base "}%{B#" transparent b-base "}"))))))

(defn makebuttons [message actions buttons]
  ;%{A1:action:}%{A3:action:}...%{A}%{A}
  (if (empty? actions)
    message
    (makebuttons (str "%{A" (first buttons) ":" (first actions) ":}" message "%{A}") (rest actions) (rest buttons))))


(defn music []
  (str
   (makebuttons "  <  " '("mpc prev" "mpc seek 0") (list 1 3))
   (makebuttons
    (first (str/split (exec "mpc current") #"\n"))
    '("mpc toggle" "urxvt -e ncmpcpp -s lyrics &" "mpc volume +5" "mpc volume -5") (list 1 3 4 5))
   (makebuttons "  >  " '("mpc next" "mpc next") (list 1 3))))


(defn getwm []
  (second
   (str/split
    (first
     (str/split
      (exec "wmctrl -m")
      #"\n"))
    #"\s")))


(defn getdesktoplist [] 
  (map
   #(str/split % #"\s")
   (map (fn [x] (squeeze x " ")) (str/split (exec "wmctrl -d") #"\n"))))


(defn getindex [desktop wm]
  (if (= wm "CWM")
    (str (nth desktop 0)))
    (str (+ (read-string (str (nth desktop 0))) 1)))


(defn getwindows [desktop wm] ;desktop is one line of the output of wmctrl -d
  (:out
   (sh "xdotool" "search" "--desktop" ;"$HOME/.scripts/window/act.sh" "--getwindowsfordesktop"
       (getindex desktop wm)
       "" ;xdotool only
       )))

(defn isactive? [desktop]
  (= "*" (nth desktop 1)))

(defn haswindows? [desktop wm] ;causing problems
  (not (str/blank? (getwindows desktop wm))))

(defn getname [desktop wm]
  (if (= wm "bspwm")
    (nth desktop 8)
    (if (= wm "CWM")
      (nth desktop 9)
      "undetermined")))
   


(defn makedesktopbutton [d wm]
  (def index (getindex d wm))
  (str
   (focus 
    (if (isactive? d) true (if (haswindows? d wm) false "dimmed")))
   (makebuttons
    (str " " (getname d wm) " ") (list (str "$HOME/.scripts/window/act.sh -s " index) (str "$HOME/.scripts/window/act.sh --capturefocuscapture " index) (str "$HOME/.scripts/window/act.sh --showthumbnail " index)) (list 3 1 6))))


(defn desktops [wm]
  (def dlist
    (if (= wm "CWM")
      (drop 1 (map #(makedesktopbutton % wm) (getdesktoplist)))
      (map #(makedesktopbutton % wm) (getdesktoplist))))
  (makebuttons
   (str/join dlist)
   '("$HOME/.scripts/window/act.sh --capturefocuscapture next" "$HOME/.scripts/window/act.sh --capturefocuscapture prev") '(4 5)))

(defn date [] (nth (str/split (:out (sh "date" "+%a, %b %-d %Y - %-I:%M%P")) #"\n") 0))

(defn battery [cap status threshold]
  (if (and (.exists (io/file cap)) (.exists (io/file status)))
     (if (= "Charging" (str/trim-newline (slurp status)))
       (str (focus false) " " (str/trim-newline (slurp cap)) "%" " - charging")
       (str (if (< (read-string (str/trim-newline (slurp cap))) threshold)
              (focus true)
              (focus false))
            " " (str/trim-newline (slurp cap)) "% "))
     "" ))


(def wm (getwm))
(def d (atom (desktops wm)))
(def m (atom (music)))
(def b (atom (battery bat0cap bat0status 25)))
(def t (atom (date)))


(future (while true (Thread/sleep 100) (reset! d (desktops wm))))
(future (while true (Thread/sleep 500) (reset! m (music))))
(future (while true (Thread/sleep 5000) (reset! b (battery bat0cap bat0status 25))))
(future (while true  (Thread/sleep 1000) (reset! t (date))))

(defn spew []
  (println
   (focus false) "%{l}  " @d
   (focus false) "%{c}" @m
   "%{r}" @b (focus false) " " @t  "  "))


(while true
  (Thread/sleep 100)
  (spew))


  
(shutdown-agents) ;without this it hangs
