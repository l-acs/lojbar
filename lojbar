#!/bin/clojure
; -*-Clojure-*-
(require '[clojure.string :as str])
(use '[clojure.java.shell :only [sh]])
(import 'java.lang.Runtime)


(def fore "%{F#DDFFFFFF}")
(def back "%{B#90111111}")
(def fore-focused "%{F#E9FFFFFF}") ;near-full opacity
(def back-focused "%{B#E9111111}") ;near-full opacity

(defn makebuttons [message actions buttons]
  ;%{A1:action:}%{A3:action:}...%{A}%{A}
  (if (empty? actions)
    message
    (makebuttons (str "%{A" (first buttons) ":" (first actions) ":}" message "%{A}") (rest actions) (rest buttons))))


(def music
  (str
   (makebuttons "  <  " '("mpc prev" "mpc seek 0") (list 1 3))
   (makebuttons
    (first (str/split (:out (sh "mpc" "status")) #"\n"))
    '("mpc toggle" "mpc toggle" "mpc volume +5" "mpc volume -5") (list 1 3 4 5))
   (makebuttons "  >  " '("mpc next" "mpc next") (list 1 3))))


(defn getwm []
  (second
   (str/split
    (first
     (str/split
      (:out (sh "wmctrl" "-m"))
      #"\n"))
    #"\s")))


(defn getdesktoplist [] 
  (def base
    (:out
     (sh "wmctrl" "-d")))
  (map
   #(str/split % #"\s")
   (str/split base #"\n")))


(defn getindex [desktop]
  (str (nth desktop 0)))

(defn getwindows [desktop] ;desktop is one line of the output of wmctrl -d
  (:out
   (sh "/home/l-acs/.scripts/window/act.sh" "--getwindowsfordesktop"
       (getindex desktop))))

(defn isactive? [desktop]
  (= "*" (nth desktop 2)))

(defn haswindows? [desktop]
  (not (str/blank? (getwindows desktop))))

(defn getname [desktop]
  (nth desktop 12))


(defn makedesktopbutton [d]
  (if (isactive? d)
    (def out (str fore-focused back-focused))
    (def out (str fore back)))
  (def index (if (= (getwm) "CWM") (getindex d) (str (+ (read-string (getindex d)) 1))))
  (str out
       (makebuttons
        (str " " (getname d) " ") (list (str "$HOME/.scripts/window/act.sh -s " index) (str "$HOME/.scripts/window/act.sh -f " index)) (list 3 1))))

;; (def desktops
;;   (str/join (map makedesktopbutton (getdesktoplist))))
(def desktops (makebuttons (str/join (map makedesktopbutton (getdesktoplist))) '("$HOME/.scripts/window/act.sh -f next" "$HOME/.scripts/window/act.sh -f prev") '(4 5)))

(def date (nth (str/split (:out (sh "date" "+%a, %b %-d %Y - %I:%M%P")) #"\n") 0))

(def battery
  (str
   (str/trim-newline (slurp "/sys/class/power_supply/BAT0/capacity"))
   "% - "
   (str/trim-newline (slurp "/sys/class/power_supply/BAT0/status"))))


(print
 fore back
 "%{l}  " desktops
 fore back
 "%{c}" music
 fore back
 "%{r}" battery " " date  "  ")


(shutdown-agents) ;without this it hangssss

