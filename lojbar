#!/bin/clojure
; -*-Clojure-*-
(require '[clojure.string :as str])
(use '[clojure.java.shell :only [sh]])
(import 'java.lang.Runtime)


(def fore "%{F#FFFFFF}")
(def back "%{B#222222}")

(defn makebutton [message actions]
  ;%{A1:action:}%{A3:action:}...%{A}%{A}
  (def button 0)
  (str
   (str/join
    (map
     (fn [x]
       (def button (+ button 1))
       (str "%{A" button ":" x ":}"))
     actions)
    )
   message
   (str/join
    (map
     (fn [x]
       (str "%{A}")) actions))))




(defn music []
  (str
   (makebutton "  <  " '("mpc prev" "b" "mpc seek 0"))
   (makebutton
    (first (str/split (:out (sh "mpc" "status")) #"\n"))
    '("mpc toggle" "mpc toggle" "mpc toggle" "mpc volume +5" "mpc volume -5"))
   (makebutton "  >  " '("mpc next" "b" "mpc next"))))



(defn getwm []
   (second
    (str/split
     (first
      (str/split
       (:out (sh "wmctrl" "-m"))
       #"\n"))
     #"\s")))



(defn getdesktoplist []
  (def base
    (:out
     (sh "wmctrl" "-d")))
  (map
   #(str/split % #"\s")
   (str/split base #"\n")))


(defn getwindows [desktop] ;desktop is one line of the output of wmctrl -d
  (:out
   (sh "/home/l-acs/.scripts/window/act.sh" "--getwindowsfordesktop"
       (str
        (get (vec desktop) 0)))))

(defn isactive? [desktop]
  (= "*" (get (vec desktop) 2)))

(defn haswindows? [desktop]
  (not (str/blank? (getwindows desktop))))

(defn getname [desktop]
  (get (vec desktop) 13))


(defn desktops []
  (def count 0)
  (str/join "  "
   (map
    (fn [d]
      (def count (+ count 1))
      (makebutton d
                  (list (str "$HOME/.scripts/window/act.sh -f " count) " " (str "$HOME/.scripts/window/act.sh -s " count))))
    (map getname (getdesktoplist)))))



(defn date [] (new java.util.Date))


(println
 fore back
 "%{l}   " (desktops)
 "%{c}"  (music)
 "%{r}" (date)
 "   " )





(shutdown-agents) ;without this it hangssss
